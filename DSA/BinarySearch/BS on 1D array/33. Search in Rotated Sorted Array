# 🧮 33. Search in Rotated Sorted Array

🔗https://leetcode.com/problems/search-in-rotated-sorted-array/submissions/1739451203/

## ✅ Approach:
-after finding the mid,we check whether the target is present in the sorted half or not

## ⏱️ Time Complexity:
- O(log N) time  , O(1) space

## 🔤 Code (Java):
```java
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;

        while(low<=high){
            int mid=(low+high)/2;

            if(nums[mid]==target){
                return mid;
            }
            
            if(nums[low]<=nums[mid]){     //left half is sorted
                if(nums[low]<=target && nums[mid]>target){
                    high=mid-1;          // target lies in left half
                }
                else{
                    low=mid+1;           // target lies in right half
                }
            }

            else{                        //right half is sorted
                if(nums[mid]<target && nums[high]>=target){
                    low=mid+1;           // target lies in right half
                }
                else{
                    high=mid-1;          // target lies in left half
                }
            }
        }
        return -1;
    }
}
}
