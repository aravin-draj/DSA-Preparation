Approach:
used a hashmap to store prefix sum and searching for it in the iteration
as well as storing the prefix sum and does not store the already appeared sum to avoid error

complexity:
O(N) time,O(N) space

public class Longest_subarray_sumk {
	static int max_length_sumarray_sumk(int[] arr,int N,int k) { 
		int longest=0;
		int sum=0;
		HashMap<Integer,Integer> mp=new HashMap<>();
		for(int i=0;i<N;i++) {
			sum+=arr[i];
			if(sum==k) {
				longest=Math.max(longest,i+1);
			}
			
			int rem=sum-k;
			
			if(mp.containsKey(rem)) {
				int len=i-mp.get(rem);
				longest=Math.max(longest,len);
			}
			
			if(!mp.containsKey(sum)) {
				mp.put(sum,i);
			}
			
		}
		
		
		return longest;
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.print("Enter array elements : ");
		String line=sc.nextLine();
		System.out.print("Enter K : ");
		int k=sc.nextInt();
		
		String[] nums=line.split(" ");
		int N=nums.length;
		int[] arr =new int[N];		
		for(int i=0;i<N;i++) {
			arr[i]=Integer.parseInt(nums[i]);
		}
		System.out.print(max_length_sumarray_sumk(arr,N,k));
		sc.close();
	}

}
