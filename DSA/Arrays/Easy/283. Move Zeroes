# 🧮 283. Move Zeroes

🔗 https://leetcode.com/problems/move-zeroes/description/

## ✅ Approach:
- Two pointer, i to add unique elemnts and j to find unique elemts after all fillin the last with zeors
-Two pointer ,first finding the first zero element and j start there and i=j+1
i moves independently and j moves only when a swap happens 
i gives the non zero element and j place swaps it

## ⏱️ Time Complexity:
- O(n+no of zeros) time, O(n) space
-O(n) time, O(1) space

## 🔤 Code (Java):
```java
1)
class Solution {
    public void moveZeroes(int[] nums) {
        int N=nums.length;
        int i=0;
        int j=0;
        while(j<N){
            if(nums[j]!=0){
                nums[i]=nums[j];
                i++;
            }
            j++;
        }
        for(int k=N-1;k>=i;k--){
            nums[k]=0;
        }
        return;
    }
}

2)
class Solution {
    public void moveZeroes(int[] nums) {
        int N=nums.length;
        int j=-1;
        for(int i=0;i<N;i++){
            if(nums[i]==0){
                j=i;
                break;
            }
        }
        if(j==-1){
            return;
        }

        for(int i=j+1;i<N;i++){
            if(nums[i]!=0){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                j++;
            }
        }
        return;
    }
}
