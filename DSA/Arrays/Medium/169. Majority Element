# 🧮 169. Majority Element

🔗 https://leetcode.com/problems/majority-element/description/

## ✅ Approach:
- 1)Use a HashMap to track seen numbers and checking if they are crossing n/2
- 2) Boyer-Moore Voting Algorithm,voting for an current element if it becomes 0 change the element
as majority element appears more than n/2 it will never lose the voting

## ⏱️ Time Complexity:
- 1)O(n) time, O(n) space
- 2)O(n) time, O(1) space

## 🔤 Code (Java):
```java
1)
class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer,Integer> mp= new HashMap<>();
        int N=nums.length;
        for(int num:nums){
            mp.put(num,mp.getOrDefault(num,0)+1);
            if(mp.get(num)>N/2){
                return num;
            }
        }
        return 0;
    }
}
2)
class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        int ele=nums[0];
        for(int i=0;i<nums.length;i++){
            if(count==0){
                count=1;
                ele=nums[i];
            }
            else if(nums[i]==ele){
                count++;
            }
            else{
                count--;
            }
        }
        return ele;
    }
}
