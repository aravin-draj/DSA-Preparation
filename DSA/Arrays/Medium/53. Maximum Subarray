# 🧮 53. Maximum Subarray

🔗 https://leetcode.com/problems/maximum-subarray/description/

## ✅ Approach:
-current_sum and max_sum
if the current_sum+ i th elemnt is smaller than the ith element,it means the subarray is not worth carrying
it does not give positive impact on the sum,so start with the current element
while computing the max_sum in every iteration

## ⏱️ Time Complexity:
- O(n) time, O(1) space

## 🔤 Code (Java):
```java
class Solution {
    public int maxSubArray(int[] nums) {
        int max_sum=nums[0];
        int current_sum=nums[0];
        for(int i=1;i<nums.length;i++){
            if(current_sum+nums[i]<=nums[i]){
                current_sum=nums[i];
            }
            else{
                current_sum+=nums[i];
            }
            max_sum=Math.max(current_sum,max_sum);
        }
        return max_sum;
    }
}

2)
to give the index of the subaray
class Solution {
    public int maxSubArray(int[] nums) {
        int max_sum=nums[0];
        int current_sum=nums[0];
        int start;
        int end;
        for(int i=1;i<nums.length;i++){
            if(current_sum+nums[i]<=nums[i]){
                current_sum=nums[i];
                start=i;
            }
            else{
                current_sum+=nums[i];
            }
           if(current_sum>max_sum){
                max_sum=current_sum;
                end=i;
        }
        return max_sum;
    }
}
