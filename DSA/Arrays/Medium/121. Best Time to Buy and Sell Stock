# üßÆ 121. Best Time to Buy and Sell Stock

üîó https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/?envType=problem-list-v2&envId=eeudwo2i

## ‚úÖ Approach:
used a two pointer to buy and check to sell high,a slighltly better approach by remembering the previous buy
if the current buy is larger than the previous buy not going to selling loop 

used Dynamic Programming,this approach instead of buying start selling from the second day and remember the min value simultaneously
by this after selling each day we can compute the profit with our min value till the iteration 
its like selling first and looking to buy cheap in the past by remembering the min value we dont have to loop through the past each time

used two pointer to get the optimal solution fitst starting with a buy and sell day by moving the sell pointer and moving the buy pointer
only when finding a lower than current buy day

## ‚è±Ô∏è Time Complexity:
- O(N^2) time, O(1) space
- O(N) time, O(1) space
- O(N) time, O(1) space

## üî§ Code (Java):
```java
1) Two Pointer
class Solution {
    public int maxProfit(int[] prices) {
        int buy=0;
        int max_profit=0;
        int i=0;
        int N=prices.length;
        while(i< N-1){
            if(prices[i]>=buy && i!=0){
                i++;
                continue;
            }
            buy=prices[i];
            for(int j=i+1;j<N;j++){
                max_profit=Math.max(max_profit,prices[j]-buy);
            }
            i++;
        }
        return max_profit;
    }
}

2)Dynamic Programming
#forward version
class Solution {
    public int maxProfit(int[] prices) {
        int buy_min=prices[0];
        int max_profit=0;
        for(int i=1;i<prices.length;i++){
            max_profit=Math.max(max_profit,prices[i]-buy_min);
            buy_min=Math.min(buy_min,prices[i]);
        }
        return max_profit;
    }
}
#backward version
public int maxProfit(int[] prices) {
        int N=prices.length;
        int sell=prices[N-1];
        int profit=0;
        for(int i=N-2;i>=0;i--){
            sell=Math.max(prices[i],sell);
            profit=Math.max(profit,sell-prices[i]);
        }
        return profit;
    }


3)Two pointers optimal

class Solution {
    public int maxProfit(int[] prices) {
        int buy=0;
        int sell=1;
        int max_profit=0;
        while(sell<prices.length){
            if(prices[sell]<prices[buy]){
                buy=sell;
            }
            else{
                max_profit=Math.max(max_profit,prices[sell]-prices[buy]);
            }
            sell++;
        }
        return max_profit;
    }
}
